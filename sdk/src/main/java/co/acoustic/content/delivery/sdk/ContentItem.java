/*
 * Copyright 2020 Acoustic, L.P.
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Apache License, Version 2.0
 * www.apache.org
 * Home page of The Apache Software Foundation
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package co.acoustic.content.delivery.sdk;

import android.os.Parcel;

import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents content item {@link Document} that can be retrieved using delivery search API, provides document-specific properties.
 */
public class ContentItem extends Document {

    /**
     * Field can contain boolean element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<Boolean> boolean1;

    /**
     * Field can contain boolean element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<Boolean> boolean2;

    /**
     * The list of all category selections for the content.
     * All category selection elements on content are merged into this property.
     */
    private ArrayList<String> categories;

    /**
     * The list of all leaf category selection elements for the asset or content.
     */
    private ArrayList<String> categoryLeaves;

    /**
     * Field can contain date element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     * <p>
     * Examples:
     * <ul>
     * <li>2020-01-07T17:52:31.610Z</li>
     * <li>2020-01-07T17:52:31.477Z</li>
     * <li>2020-01-07T17:52:31.828Z</li>
     * </ul>
     */
    private ArrayList<String> date1;

    /**
     * Field can contain date element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     * <p>
     * Examples:
     * <ul>
     * <li>2020-01-07T17:52:31.610Z</li>
     * <li>2020-01-07T17:52:31.477Z</li>
     * <li>2020-01-07T17:52:31.828Z</li>
     * </ul>
     */
    private ArrayList<String> date2;

    /**
     * Field contains the full JSON document for the item.
     */
    private JSONObject document;

    /**
     * Field contains the list of path values related to files that are generated by pre-rendering the item.
     */
    private ArrayList<String> generatedFiles;

    /**
     * Field specifies whether the content is managed or not managed and whether the asset is a managed asset or a so-called non-managed web asset.
     */
    private boolean isManaged;

    /**
     * Field contains an array of strings.
     * Each string consists of the latitude and the longitude of location elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<String> location1;

    /**
     * Field contains an array of strings.
     * Each string consists of the latitude and the longitude of a Location element of the content item.
     * For example, this field contains ["48.666259, 9.039273", "53.418880, -6.416081"] for a content item with two Location elements.
     */
    private ArrayList<String> locations;

    /**
     * Field can contain number element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<Double> number1;

    /**
     * Field can contain number element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<Double> number2;

    /**
     * Field contains the state the item is in.
     * The value of this field can be "ready" or "retired".
     */
    private String status;

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<String> string1;

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<String> string2;

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<String> string3;

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private ArrayList<String> string4;

    /**
     * Field can contain a single date element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private String sortableDate1;

    /**
     * Field can contain a single date element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private String sortableDate2;

    /**
     * Field can contain a single number element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private Double sortableNumber1;

    /**
     * Field can contain a single number element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private Double sortableNumber2;

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private String sortableString1;

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private String sortableString2;

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private String sortableString3;

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     */
    private String sortableString4;

    /**
     * Field is a collection of field names and text fragments that make up the item.
     * It facilitates full-text search.
     */
    private ArrayList<String> text;

    /**
     * Field contains the name of the content type.
     */
    private String type;

    /**
     * Field contains the ID of the content type.
     */
    private String typeId;

    ContentItem(DeliverySearchResponseDocument rawDoc) {
        super(rawDoc);

        boolean1 = rawDoc.boolean1;
        boolean2 = rawDoc.boolean2;

        categories = rawDoc.categories;

        categoryLeaves = rawDoc.categoryLeaves;

        date1 = rawDoc.date1;
        date2 = rawDoc.date2;

        document = rawDoc.document;

        generatedFiles = rawDoc.generatedFiles;

        isManaged = rawDoc.isManaged;

        location1 = rawDoc.location1;
        locations = rawDoc.locations;

        number1 = rawDoc.number1;
        number2 = rawDoc.number2;

        status = rawDoc.status;

        string1 = rawDoc.string1;
        string2 = rawDoc.string2;
        string3 = rawDoc.string3;
        string4 = rawDoc.string4;

        sortableDate1 = rawDoc.sortableDate1;
        sortableDate2 = rawDoc.sortableDate2;

        sortableNumber1 = rawDoc.sortableNumber1;
        sortableNumber2 = rawDoc.sortableNumber2;

        sortableString1 = rawDoc.sortableString1;
        sortableString2 = rawDoc.sortableString2;
        sortableString3 = rawDoc.sortableString3;
        sortableString4 = rawDoc.sortableString4;

        text = rawDoc.text;

        type = rawDoc.type;
        typeId = rawDoc.typeId;
    }

    private ContentItem(Parcel source) {
        super(source);
    }

    /**
     * Field can contain boolean element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item
     *
     * @return boolean element values for elements mapped to this field
     */
    public List<Boolean> getBoolean1() {
        return boolean1;
    }

    /**
     * Field can contain boolean element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item
     *
     * @return boolean element values for elements mapped to this field
     */
    public List<Boolean> getBoolean2() {
        return boolean2;
    }

    /**
     * @return list of all category selections for the content. All category selection elements on content are merged into this property
     */
    public List<String> getCategories() {
        return categories;
    }

    /**
     * @return list of all leaf category selection elements for the asset or content
     */
    public List<String> getCategoryLeaves() {
        return categoryLeaves;
    }

    /**
     * Field can contain date element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return date element values for elements mapped to this field
     */
    public List<String> getDate1() {
        return date1;
    }

    /**
     * Field can contain date element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return date element values for elements mapped to this field
     */
    public List<String> getDate2() {
        return date2;
    }

    /**
     * @return full JSON document for the item
     */
    public JSONObject getDocument() {
        return document;
    }

    /**
     * @return list of path values related to files that are generated by pre-rendering the item
     */
    public List<String> getGeneratedFiles() {
        return generatedFiles;
    }

    /**
     * @return whether the content is managed or not managed and whether the asset is a managed asset or a so-called non-managed web asset
     */
    public boolean isManaged() {
        return isManaged;
    }

    /**
     * Field contains an array of strings.
     * Each string consists of the latitude and the longitude of location elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return an array of strings, aach string consists of the latitude and the longitude of location elements mapped to this field
     */
    public List<String> getLocation1() {
        return location1;
    }

    /**
     * Field contains an array of strings.
     * Each string consists of the latitude and the longitude of location elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return an array of strings, aach string consists of the latitude and the longitude of location elements mapped to this field
     */
    public List<String> getLocations() {
        return locations;
    }

    /**
     * Field can contain number element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return number element values for elements mapped to this field
     */
    public List<Double> getNumber1() {
        return number1;
    }

    /**
     * Field can contain number element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return number element values for elements mapped to this field
     */
    public List<Double> getNumber2() {
        return number2;
    }

    /**
     * Field contains the state the item is in.
     * The value of this field can be "ready" or "retired".
     *
     * @return state the item is in, can be "ready" or "retired"
     */
    public String getStatus() {
        return status;
    }

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return string element values for elements mapped to this field
     */
    public List<String> getString1() {
        return string1;
    }

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return string element values for elements mapped to this field
     */
    public List<String> getString2() {
        return string2;
    }

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return string element values for elements mapped to this field
     */
    public List<String> getString3() {
        return string3;
    }

    /**
     * Field can contain string element values for elements mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return string element values for elements mapped to this field
     */
    public List<String> getString4() {
        return string4;
    }

    /**
     * Field can contain a single date element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single date element value for an element mapped to this field
     */
    public String getSortableDate1() {
        return sortableDate1;
    }

    /**
     * Field can contain a single date element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single date element value for an element mapped to this field
     */
    public String getSortableDate2() {
        return sortableDate2;
    }

    /**
     * Field can contain a single number element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single number element value for an element mapped to this field
     */
    public Double getSortableNumber1() {
        return sortableNumber1;
    }

    /**
     * Field can contain a single number element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single number element value for an element mapped to this field
     */
    public Double getSortableNumber2() {
        return sortableNumber2;
    }

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single string element value for an element mapped to this field
     */
    public String getSortableString1() {
        return sortableString1;
    }

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single string element value for an element mapped to this field
     */
    public String getSortableString2() {
        return sortableString2;
    }

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single string element value for an element mapped to this field
     */
    public String getSortableString3() {
        return sortableString3;
    }

    /**
     * Field can contain a single string element value for an element mapped to this field.
     * The mapping of elements to search fields is defined in the content type referenced by the content item.
     *
     * @return a single string element value for an element mapped to this field
     */
    public String getSortableString4() {
        return sortableString4;
    }

    /**
     * Field is a collection of field names and text fragments that make up the item.
     * It facilitates full-text search.
     *
     * @return a collection of field names and text fragments that make up the item
     */
    public List<String> getText() {
        return text;
    }

    /**
     * Field contains the name of the content type.
     *
     * @return name of the content type
     */
    public String getType() {
        return type;
    }

    /**
     * Field contains the ID of the content type.
     *
     * @return ID of the content type
     */
    public String getTypeId() {
        return typeId;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        super.writeToParcel(dest, flags);
        ParcelableUtils.writeArrayListOfBoolean(boolean1, dest);
        ParcelableUtils.writeArrayListOfBoolean(boolean2, dest);
        ParcelableUtils.writeArrayListOfStrings(categories, dest);
        ParcelableUtils.writeArrayListOfStrings(categoryLeaves, dest);
        ParcelableUtils.writeArrayListOfStrings(date1, dest);
        ParcelableUtils.writeArrayListOfStrings(date2, dest);
        ParcelableUtils.writeJSONObject(document, dest);
        ParcelableUtils.writeArrayListOfStrings(generatedFiles, dest);
        dest.writeInt(isManaged ? 1 : 0);
        ParcelableUtils.writeArrayListOfStrings(location1, dest);
        ParcelableUtils.writeArrayListOfStrings(locations, dest);
        ParcelableUtils.writeArrayListOfDouble(number1, dest);
        ParcelableUtils.writeArrayListOfDouble(number2, dest);
        dest.writeString(status);
        ParcelableUtils.writeArrayListOfStrings(string1, dest);
        ParcelableUtils.writeArrayListOfStrings(string2, dest);
        ParcelableUtils.writeArrayListOfStrings(string3, dest);
        ParcelableUtils.writeArrayListOfStrings(string4, dest);
        dest.writeString(sortableDate1);
        dest.writeString(sortableDate2);
        dest.writeSerializable(sortableNumber1);
        dest.writeSerializable(sortableNumber2);
        dest.writeString(sortableString1);
        dest.writeString(sortableString2);
        dest.writeString(sortableString3);
        dest.writeString(sortableString4);
        ParcelableUtils.writeArrayListOfStrings(text, dest);
        dest.writeString(type);
        dest.writeString(typeId);
    }

    @Override
    void readFromParcel(Parcel source) {
        super.readFromParcel(source);
        boolean1 = ParcelableUtils.readArrayListOfBoolean(source);
        boolean2 = ParcelableUtils.readArrayListOfBoolean(source);
        categories = ParcelableUtils.readArrayListOfStrings(source);
        categoryLeaves = ParcelableUtils.readArrayListOfStrings(source);
        date1 = ParcelableUtils.readArrayListOfStrings(source);
        date2 = ParcelableUtils.readArrayListOfStrings(source);
        document = ParcelableUtils.readJSONObject(source);
        generatedFiles = ParcelableUtils.readArrayListOfStrings(source);
        isManaged = source.readInt() == 1;
        location1 = ParcelableUtils.readArrayListOfStrings(source);
        locations = ParcelableUtils.readArrayListOfStrings(source);
        number1 = ParcelableUtils.readArrayListOfDouble(source);
        number2 = ParcelableUtils.readArrayListOfDouble(source);
        status = source.readString();
        string1 = ParcelableUtils.readArrayListOfStrings(source);
        string2 = ParcelableUtils.readArrayListOfStrings(source);
        string3 = ParcelableUtils.readArrayListOfStrings(source);
        string4 = ParcelableUtils.readArrayListOfStrings(source);
        sortableDate1 = source.readString();
        sortableDate2 = source.readString();
        sortableNumber1 = (Double) source.readSerializable();
        sortableNumber2 = (Double) source.readSerializable();
        sortableString1 = source.readString();
        sortableString2 = source.readString();
        sortableString3 = source.readString();
        sortableString4 = source.readString();
        text = ParcelableUtils.readArrayListOfStrings(source);
        type = source.readString();
        typeId = source.readString();
    }

    public static final Creator<ContentItem> CREATOR = new Creator<ContentItem>() {
        @Override
        public ContentItem createFromParcel(Parcel source) {
            return new ContentItem(source);
        }

        @Override
        public ContentItem[] newArray(int size) {
            return new ContentItem[size];
        }
    };

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        ContentItem that = (ContentItem) o;

        if (isManaged != that.isManaged) return false;
        if (boolean1 != null ? !boolean1.equals(that.boolean1) : that.boolean1 != null)
            return false;
        if (boolean2 != null ? !boolean2.equals(that.boolean2) : that.boolean2 != null)
            return false;
        if (categories != null ? !categories.equals(that.categories) : that.categories != null)
            return false;
        if (categoryLeaves != null ? !categoryLeaves.equals(that.categoryLeaves) : that.categoryLeaves != null)
            return false;
        if (date1 != null ? !date1.equals(that.date1) : that.date1 != null) return false;
        if (date2 != null ? !date2.equals(that.date2) : that.date2 != null) return false;
        if (document != null ? !document.toString().equals(that.document.toString()) : that.document != null)
            return false;
        if (generatedFiles != null ? !generatedFiles.equals(that.generatedFiles) : that.generatedFiles != null)
            return false;
        if (location1 != null ? !location1.equals(that.location1) : that.location1 != null)
            return false;
        if (locations != null ? !locations.equals(that.locations) : that.locations != null)
            return false;
        if (number1 != null ? !number1.equals(that.number1) : that.number1 != null) return false;
        if (number2 != null ? !number2.equals(that.number2) : that.number2 != null) return false;
        if (status != null ? !status.equals(that.status) : that.status != null) return false;
        if (string1 != null ? !string1.equals(that.string1) : that.string1 != null) return false;
        if (string2 != null ? !string2.equals(that.string2) : that.string2 != null) return false;
        if (string3 != null ? !string3.equals(that.string3) : that.string3 != null) return false;
        if (string4 != null ? !string4.equals(that.string4) : that.string4 != null) return false;
        if (sortableDate1 != null ? !sortableDate1.equals(that.sortableDate1) : that.sortableDate1 != null)
            return false;
        if (sortableDate2 != null ? !sortableDate2.equals(that.sortableDate2) : that.sortableDate2 != null)
            return false;
        if (sortableNumber1 != null ? !sortableNumber1.equals(that.sortableNumber1) : that.sortableNumber1 != null)
            return false;
        if (sortableNumber2 != null ? !sortableNumber2.equals(that.sortableNumber2) : that.sortableNumber2 != null)
            return false;
        if (sortableString1 != null ? !sortableString1.equals(that.sortableString1) : that.sortableString1 != null)
            return false;
        if (sortableString2 != null ? !sortableString2.equals(that.sortableString2) : that.sortableString2 != null)
            return false;
        if (sortableString3 != null ? !sortableString3.equals(that.sortableString3) : that.sortableString3 != null)
            return false;
        if (sortableString4 != null ? !sortableString4.equals(that.sortableString4) : that.sortableString4 != null)
            return false;
        if (text != null ? !text.equals(that.text) : that.text != null) return false;
        if (type != null ? !type.equals(that.type) : that.type != null) return false;
        return typeId != null ? typeId.equals(that.typeId) : that.typeId == null;
    }

    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (boolean1 != null ? boolean1.hashCode() : 0);
        result = 31 * result + (boolean2 != null ? boolean2.hashCode() : 0);
        result = 31 * result + (categories != null ? categories.hashCode() : 0);
        result = 31 * result + (categoryLeaves != null ? categoryLeaves.hashCode() : 0);
        result = 31 * result + (date1 != null ? date1.hashCode() : 0);
        result = 31 * result + (date2 != null ? date2.hashCode() : 0);
        result = 31 * result + (document != null ? document.toString().hashCode() : 0);
        result = 31 * result + (generatedFiles != null ? generatedFiles.hashCode() : 0);
        result = 31 * result + (isManaged ? 1 : 0);
        result = 31 * result + (location1 != null ? location1.hashCode() : 0);
        result = 31 * result + (locations != null ? locations.hashCode() : 0);
        result = 31 * result + (number1 != null ? number1.hashCode() : 0);
        result = 31 * result + (number2 != null ? number2.hashCode() : 0);
        result = 31 * result + (status != null ? status.hashCode() : 0);
        result = 31 * result + (string1 != null ? string1.hashCode() : 0);
        result = 31 * result + (string2 != null ? string2.hashCode() : 0);
        result = 31 * result + (string3 != null ? string3.hashCode() : 0);
        result = 31 * result + (string4 != null ? string4.hashCode() : 0);
        result = 31 * result + (sortableDate1 != null ? sortableDate1.hashCode() : 0);
        result = 31 * result + (sortableDate2 != null ? sortableDate2.hashCode() : 0);
        result = 31 * result + (sortableNumber1 != null ? sortableNumber1.hashCode() : 0);
        result = 31 * result + (sortableNumber2 != null ? sortableNumber2.hashCode() : 0);
        result = 31 * result + (sortableString1 != null ? sortableString1.hashCode() : 0);
        result = 31 * result + (sortableString2 != null ? sortableString2.hashCode() : 0);
        result = 31 * result + (sortableString3 != null ? sortableString3.hashCode() : 0);
        result = 31 * result + (sortableString4 != null ? sortableString4.hashCode() : 0);
        result = 31 * result + (text != null ? text.hashCode() : 0);
        result = 31 * result + (type != null ? type.hashCode() : 0);
        result = 31 * result + (typeId != null ? typeId.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "ContentItem{" +
                "boolean1=" + boolean1 +
                ", boolean2=" + boolean2 +
                ", categories=" + categories +
                ", categoryLeaves=" + categoryLeaves +
                ", date1=" + date1 +
                ", date2=" + date2 +
                ", document=" + document +
                ", generatedFiles=" + generatedFiles +
                ", isManaged=" + isManaged +
                ", location1=" + location1 +
                ", locations=" + locations +
                ", number1=" + number1 +
                ", number2=" + number2 +
                ", status='" + status + '\'' +
                ", string1=" + string1 +
                ", string2=" + string2 +
                ", string3=" + string3 +
                ", string4=" + string4 +
                ", sortableDate1='" + sortableDate1 + '\'' +
                ", sortableDate2='" + sortableDate2 + '\'' +
                ", sortableNumber1='" + sortableNumber1 + '\'' +
                ", sortableNumber2='" + sortableNumber2 + '\'' +
                ", sortableString1='" + sortableString1 + '\'' +
                ", sortableString2='" + sortableString2 + '\'' +
                ", sortableString3='" + sortableString3 + '\'' +
                ", sortableString4='" + sortableString4 + '\'' +
                ", text=" + text +
                ", type='" + type + '\'' +
                ", typeId='" + typeId + '\'' +
                "} " + super.toString();
    }
}
